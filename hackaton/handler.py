from aiogram.types import Message,CallbackQuery,ContentType
from aiogram.filters import CommandStart, Command
from aiogram import Router,F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup,ReplyKeyboardMarkup, KeyboardButton, UNSET_PARSE_MODE
import hackaton.keyboards as kb
import requests, json
from aiogram import types
from hackaton.utils import *

router = Router()

class Register(StatesGroup):
    name = State()
    surname = State()
    birth_date = State()
    psychotype = State()
    about = State()

from aiogram import types

@router.message(F.text == "–ú–æ–∏ –≥—Ä—É–ø–ø—ã")
async def get_user_project(message: types.Message):
    user_id = message.from_user.id
    response = requests.get(f'http://127.0.0.1:5000/projects/user/{user_id}')
    
    if response.status_code == 200:
        projects = response.json()
        for project in projects:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data=f"add_user_{project['project_id']}")]
            ])
            users = ""
            for i in project["users"]:
                users += f"üë§ {i['firstname']} {i['secondname']}\n"+\
                f"üîπ–æ–ø–∏—Å–∞–Ω–∏–µ: {i['description']}\n" +\
                f"üîπ–ø—Å–∏—Ö–æ—Ç–∏–ø {i['psychotype']}\n" +\
                f"üîπ–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ {i['zodiac']}\n" +\
                f"‚≠êÔ∏è–†–∞—Å–∫–ª–∞–¥:{i['prediction']}" +\
                "\n\n\n"
            await message.answer(
                f"–ü—Ä–æ–µ–∫—Ç: {project['project_name']}\n" +
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {project['description']}\n"+
                f"–°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤: {project['avg_zodiac']}%\n" +
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤: {project['min_zodiac']}%\n" +
                f"–ù–∞–∏–º–µ–Ω–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –ø–∞—Ä–∞ –∑–Ω–∞–∫–æ–≤: {project['min_pair_zodiac']}\n" +
                f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:" +
                users,

                reply_markup=keyboard
            )
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.")

@router.callback_query(F.data.startswith("add_user_"))
async def show_group_details(callback_query: types.CallbackQuery, state: FSMContext):
    user_tg_id = callback_query.data.split("_")[2]
    storage = await state.get_data()
    print(storage)
    response = requests.post(f"http://localhost:5000/projects/{int(storage['current_project_id'])}/add_user", json={"user_id":user_tg_id})
    print(response.json)
    if response.status_code == 200:
        await callback_query.message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
            reply_markup=kb.procComand
        )
        print(f"user_tg_id {user_tg_id} 63 —Å—Ç—Ä–æ–∫–∞")
        storage['current_user_ids'].append(user_tg_id)
        await state.update_data(current_users_id=storage['current_user_ids'])
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞.")
    await callback_query.answer()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    response = requests.get('http://localhost:5000/users/'+ str(message.from_user.id))
    print(response.json)
    tg_id = message.from_user.id
    print(tg_id)
    print(type(tg_id))
    # if str(tg_id) in ['1026910141']:
    if(response.status_code == 200 or response.status_code==201):
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?', reply_markup=kb.addComand)
    else:
        await state.set_state(Register.name)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏! üöÄ\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "üîç –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –Ω–∞–≤—ã–∫–∞–º –∏ –æ–ø—ã—Ç—É\n"
            "ü§ù –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –≥–æ—Ç–æ–≤—ã–µ –∫ –ª—é–±—ã–º –≤—ã–∑–æ–≤–∞–º\n"
            "üìà –£–ª—É—á—à–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n")
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    # else:

    #     youtube_button = InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å", url="https://www.youtube.com/watch?v=dQw4w9WgXcQ")

    #     # Create the markup
    #     inline_kb = InlineKeyboardMarkup(inline_keyboard=[[youtube_button]])

    #     # Send the message with the inline keyboard
    #     await message.answer('–ó–≤–µ–∑–¥—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ–±–ª–∞–≥–æ—Å–ø–æ–∫–æ–π–Ω—ã, –±–æ—Ç –æ—Ç–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–æ–π–Ω—ã–º—ã', reply_markup=inline_kb)

@router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)

@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.surname)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')

@router.message(Register.surname)
async def register_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(Register.birth_date)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è')

    
@router.message(Register.birth_date)
async def register_birthdate(message: Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await state.set_state(Register.about)
    await message.answer('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ')

@router.message(Register.about)
async def register_about(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    await state.set_state(Register.psychotype)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Å–∏—Ö–æ—Ç–∏–ø')

@router.message(Register.psychotype)
async def register_psychotype(message: Message, state: FSMContext):
    await state.update_data(psychotype=message.text)
    telegramId=message.from_user.id
    data = await state.get_data()

    comandList={'telegram_id':telegramId, 'firstname':data["name"], "description":data["about"],
                'secondname':data["surname"], 'psychotype':data["psychotype"],
                "birth_date": data["birth_date"]}
    
    url='http://127.0.0.1:5000/users'
    response = requests.post(url,json=comandList)
    if (response.status_code == 200 or response.status_code == 201):  # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        response = requests.get(f"http://localhost:5000/users/{telegramId}")
        user = response.json()
        user_str = f"üë§ {user['firstname']} {user['secondname']}\n"+\
                f"üîπ–æ–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n" +\
                f"üîπ–ø—Å–∏—Ö–æ—Ç–∏–ø {user['psychotype']}\n" +\
                f"üîπ–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ {user['zodiac']}\n" +\
                f"‚≠êÔ∏è–†–∞—Å–∫–ª–∞–¥: {user['prediction']}"
        await message.answer(user_str,reply_markup=kb.addComand)
    else:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞: {response.status_code}')

    await state.clear()


class Comand(StatesGroup):
    comand_name=State()
    description=State()
    current_group=State()
    
@router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É')
async def register(message: Message, state: FSMContext):
    await state.set_state(Comand.comand_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã')


@router.message(Comand.comand_name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(comand_name=message.text)
    await state.set_state(Comand.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è')

@router.message(Comand.description)
async def register_group(message: Message, state: FSMContext):
    tg_id=message.from_user.id
    
    await state.update_data(description=message.text)
    data = await state.get_data()
    comandList={'project_name':data["comand_name"], 'description':data["description"],'sender_tg_id':tg_id}
    await state.clear()
    await state.update_data(current_user_ids=[tg_id])
    
    
    
    url='http://localhost:5000/projects'
    response =requests.post(url,json=comandList)
    data = response.json()
    project_id = data['project_id']
    await state.update_data(current_project_id=project_id)
    storage = await state.get_data()
    if (response.status_code == 200 or response.status_code == 201):  # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        response = requests.get("http://127.0.0.1:5000/users/all")
        data = response.json()
        print(data)
        print(tg_id)
        for user in data:
            if user['telegram_id'] != str(tg_id):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_user_{user['telegram_id']}")]
                ])

                await message.answer(
                    f"üë§ {user['firstname']} {user['secondname']}\n"+
                    f"üîπ–æ–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n" +
                    f"üîπ–ø—Å–∏—Ö–æ—Ç–∏–ø {user['psychotype']}\n" +
                    f"üîπ–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ {user['zodiac']}\n" +
                    f"‚≠êÔ∏è–†–∞—Å–∫–ª–∞–¥: {user['prediction']}",

                    reply_markup=keyboard
                )
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ"
                             , reply_markup=ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É')]],resize_keyboard=True
                )
                )
        

    else:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}\n{response.json()}')
    

@router.message(F.text == "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É")
async def sf_group(message: Message, state: FSMContext):
    print("ok")
    tg_id=message.from_user.id
    storage = await state.get_data()
    response = requests.get(f"http://localhost:5000/projects/user/{tg_id}")
    data = response.json()
    project = [d for d in data if d['project_id'] == storage['current_project_id']][0]
    print(project)
    users = ""
    for i in project["users"]:
        users += f"üë§ {i['firstname']} {i['secondname']}\n"+ \
            f"üîπ–æ–ø–∏—Å–∞–Ω–∏–µ: {i['description']}\n" + \
            f"üîπ–ø—Å–∏—Ö–æ—Ç–∏–ø {i['psychotype']}\n" + \
            f"üîπ–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ {i['zodiac']}\n"+\
            f"‚≠êÔ∏è–†–∞—Å–∫–ª–∞–¥: {i['prediction']}\n\n\n" 
    await message.answer(
        f"üìã–ü—Ä–æ–µ–∫—Ç: {project['project_name']}\n" +
        f"üìù–û–ø–∏—Å–∞–Ω–∏–µ: {project['description']}\n"+
        f"üîÆ–°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤: {project['avg_zodiac']}%\n" +
        f"‚ö†Ô∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤: {project['min_zodiac']}%\n" +
        f"‚ö°Ô∏è–ù–∞–∏–º–µ–Ω–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –ø–∞—Ä–∞ –∑–Ω–∞–∫–æ–≤: {project['min_pair_zodiac']}\n" +
        f"üë•–£—á–∞—Å—Ç–Ω–∏–∫–∏:" +
        users,

        reply_markup=kb.addComand
    )
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë")
async def current_group(message: Message, state: FSMContext):
    await state.update_data(description=message.text)

    tg_id=message.from_user.id
    storage = await state.get_data()

    response = requests.get("http://127.0.0.1:5000/users/all")
    data = response.json()

    for user in data:
        if user['telegram_id'] != str(tg_id):
            if user['telegram_id'] in storage['current_user_ids']:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"remove_user_{user['telegram_id']}")]
            ])
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_user_{user['telegram_id']}")]
                ])

            await message.answer(
                f"üë§ {user['firstname']}{user['secondname']}\n"+ \
                f"üîπ–æ–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n" + \
                f"üîπ–ø—Å–∏—Ö–æ—Ç–∏–ø {user['psychotype']}\n" + \
                f"üîπ–∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ {user['zodiac']}\n"+\
                f"‚≠êÔ∏è–†–∞—Å–∫–ª–∞–¥: {user['prediction']}",

                reply_markup=keyboard
            )
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ", reply_markup=kb.procComand)

@router.message(F.text == '–†–∞—Å–∫–ª–∞–¥—ã')
async def prediction(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–±—â–µ–µ", callback_data="prediction_–û–±—â–µ–µ")],
                    [InlineKeyboardButton(text="–ó–¥–æ—Ä–æ–≤—å–µ", callback_data="prediction_–ó–¥–æ—Ä–æ–≤—å–µ")],
                    [InlineKeyboardButton(text="–ü—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ", callback_data="prediction_–ü—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ")],
                    [InlineKeyboardButton(text="–õ—é–±–æ–≤—å", callback_data="prediction_–õ—é–±–æ–≤—å")],
                    [InlineKeyboardButton(text="–ö–∞—Ä—å–µ—Ä–∞, –¥–µ–Ω—å–≥–∏", callback_data="prediction_–ö–∞—Ä—å–µ—Ä–∞, –¥–µ–Ω—å–≥–∏")]
                ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup= keyboard)

@router.callback_query(F.data.startswith("prediction_"))
async def show_group_details(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        prediction = callback_query.data.split("_")[1]
    except(IndexError, ValueError):
        await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö." + callback_query.data)
        return
    response = requests.get(f"http://localhost:5000/prediction/{prediction}")
    if response.status_code == 200:
        data = response.json()
        print(data[0])
        await callback_query.message.answer(f"{data[0]['cards_msg']}\n\n{data[0]['prediction']}")
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—É—Å–æ–≤–∫–∏ –∫–æ–ª–æ–¥—ã.")
    await callback_query.answer()